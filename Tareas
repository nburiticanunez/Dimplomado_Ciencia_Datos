{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWuytSVwbCOUlmyb5DQlBf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nburiticanunez/Dimplomado_Ciencia_Datos/blob/main/Tareas\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2vBfIuZZKH_K",
        "outputId": "fdf165c2-1adb-42df-d82a-26e2702330b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La persona tiene 33 años.\n"
          ]
        }
      ],
      "source": [
        "##punto 1:\n",
        "from datetime import date\n",
        "\n",
        "def calcular_edad(fecha_nacimiento):\n",
        "    hoy = date.today()\n",
        "    edad = hoy.year - fecha_nacimiento.year\n",
        "    if hoy.month < fecha_nacimiento.month or (hoy.month == fecha_nacimiento.month and hoy.day < fecha_nacimiento.day):\n",
        "        edad -= 1\n",
        "    return edad\n",
        "\n",
        "# Ejemplo de uso\n",
        "fecha_nacimiento = date(1990, 5, 15)\n",
        "edad = calcular_edad(fecha_nacimiento)\n",
        "print(\"La persona tiene\", edad, \"años.\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 2\n",
        "def escribir_centrado(texto):\n",
        "    espacios = \" \" * (40 - len(texto) // 2)\n",
        "    print(espacios + texto)\n",
        "\n",
        "# Ejemplo de uso\n",
        "texto = \"¡Hola, mundo!\"\n",
        "escribir_centrado(texto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B6UT6vgzKZrr",
        "outputId": "aabf39a8-c02f-4b9d-d9fd-ae00016491c2"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                  ¡Hola, mundo!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 3\n",
        "\n",
        "def decorador_markdown(func):\n",
        "    def wrapper(texto):\n",
        "        texto = f\"**{texto}**\"\n",
        "        texto = f\"*{texto}*\"\n",
        "        return texto\n",
        "    return wrapper\n",
        "\n",
        "@decorador_markdown\n",
        "def escribir_markdown(texto):\n",
        "    print(texto)\n",
        "\n",
        "# Ejemplo de uso\n",
        "texto = \"Este es un texto marcado con Markdown\"\n",
        "escribir_markdown(texto)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "9ERYM2suKffz",
        "outputId": "297cd9b6-2f19-4986-eba2-ff2e76e56a74"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'***Este es un texto marcado con Markdown***'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 4\n",
        "def comprobar_multiplo(a, b):\n",
        "    if a % b == 0 or b % a == 0:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "# Ejemplo de uso\n",
        "numero1 = 15\n",
        "numero2 = 5\n",
        "if comprobar_multiplo(numero1, numero2):\n",
        "    print(\"Uno de los números es múltiplo del otro.\")\n",
        "else:\n",
        "    print(\"Ninguno de los números es múltiplo del otro.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0UdP8kE8K8Zd",
        "outputId": "1477d6a6-8d67-4312-b8c9-23b8c131dc92"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uno de los números es múltiplo del otro.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 5\n",
        "def temperatura_media(temperaturas):\n",
        "    total_temperaturas = sum(temperaturas)\n",
        "    media_temperaturas = total_temperaturas / len(temperaturas)\n",
        "    return media_temperaturas\n",
        "\n",
        "# Ejemplo de uso\n",
        "temperaturas_bogota = [17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 21, 20, 19, 18, 17]\n",
        "media = temperatura_media(temperaturas_bogota)\n",
        "print(f\"La temperatura media en Bogotá es de {media} grados Celsius.\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ec3zs_gVKmD1",
        "outputId": "63088ce2-636f-44e3-8443-ec61ff6badad"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La temperatura media en Bogotá es de 17.916666666666668 grados Celsius.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 6\n",
        "def convertir_espaciado(texto):\n",
        "    espaciado = \" \".join(texto)\n",
        "    return espaciado\n",
        "\n",
        "# Ejemplo de uso\n",
        "texto = \"Hola, tú\"\n",
        "texto_espaciado = convertir_espaciado(texto)\n",
        "print(texto_espaciado)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v10OA688LSPJ",
        "outputId": "8f8df0e6-cfb1-44de-fa93-63d287d8776a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "H o l a ,   t ú\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 7\n",
        "def calcular_max_min(valores):\n",
        "    maximo = max(valores)\n",
        "    minimo = min(valores)\n",
        "    return maximo, minimo\n",
        "\n",
        "# Ejemplo de uso\n",
        "numeros = [10, 5, 20, 8, 15]\n",
        "maximo, minimo = calcular_max_min(numeros)\n",
        "print(f\"El valor máximo es {maximo} y el valor mínimo es {minimo}.\")\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3X1gXuL5Lbq1",
        "outputId": "8ad36b0e-d935-47a9-9073-6c655cbc7b00"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El valor máximo es 20 y el valor mínimo es 5.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 8\n",
        "def login(usuario, contraseña, intentos):\n",
        "    if usuario == \"usuario1\" and contraseña == \"asdasd\":\n",
        "        return True, intentos\n",
        "    else:\n",
        "        intentos += 1\n",
        "        return False, intentos\n",
        "\n",
        "# Ejemplo de uso\n",
        "usuario = input(\"Ingrese el nombre de usuario: \")\n",
        "contraseña = input(\"Ingrese la contraseña: \")\n",
        "intentos = 0\n",
        "acceso, intentos = login(usuario, contraseña, intentos)\n",
        "if acceso:\n",
        "    print(\"Inicio de sesión exitoso.\")\n",
        "else:\n",
        "    print(\"Nombre de usuario o contraseña incorrectos. Intentos:\", intentos)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hbOhevJNLkvI",
        "outputId": "78bf3053-3002-4dec-bee1-b6b4dd440ba5"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el nombre de usuario: Natalia\n",
            "Ingrese la contraseña: nats1\n",
            "Nombre de usuario o contraseña incorrectos. Intentos: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 9\n",
        "def calcular_factorial(n):\n",
        "    if n == 0:\n",
        "        return 1\n",
        "    else:\n",
        "        return n * calcular_factorial(n - 1)\n",
        "\n",
        "# Ejemplo de uso\n",
        "numero = 5\n",
        "factorial = calcular_factorial(numero)\n",
        "print(\"El factorial de\", numero, \"es:\", factorial)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QEgRs3pbLvPa",
        "outputId": "02c4eb7a-7954-48ac-9892-f7cdaf8c7f1e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El factorial de 5 es: 120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##ejercicio 10\n",
        "def segundos_a_tiempo(segundos):\n",
        "    horas = segundos // 3600\n",
        "    segundos %= 3600\n",
        "    minutos = segundos // 60\n",
        "    segundos %= 60\n",
        "    return horas, minutos, segundos\n",
        "\n",
        "def tiempo_a_segundos(horas, minutos, segundos):\n",
        "    total_segundos = (horas * 3600) + (minutos * 60) + segundos\n",
        "    return total_segundos\n",
        "\n",
        "# Ejemplo de uso\n",
        "segundos = 3672\n",
        "horas, minutos, segundos_restantes = segundos_a_tiempo(segundos)\n",
        "print(f\"{segundos} segundos equivale a {horas} horas, {minutos} minutos, {segundos_restantes} segundos.\")\n",
        "\n",
        "horas = 2\n",
        "minutos = 30\n",
        "segundos = 45\n",
        "total_segundos = tiempo_a_segundos(horas, minutos, segundos)\n",
        "print(f\"{horas} horas, {minutos} minutos, {segundos} segundos equivale a {total_segundos} segundos.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pf1NduoXL5jC",
        "outputId": "f929d549-ca3a-48a1-d897-6445a2010269"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3672 segundos equivale a 1 horas, 1 minutos, 12 segundos.\n",
            "2 horas, 30 minutos, 45 segundos equivale a 9045 segundos.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 11\n",
        "def invertir_tupla(tupla):\n",
        "    nueva_tupla = tuple(reversed(tupla))\n",
        "    return nueva_tupla\n",
        "\n",
        "# Ejemplo de uso\n",
        "tupla = (1, 2, 3, 4, 5)\n",
        "nueva_tupla = invertir_tupla(tupla)\n",
        "print(nueva_tupla)\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "obM2D4fjMDff",
        "outputId": "36781b96-de96-43de-8737-a3ddd9c999a3"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5, 4, 3, 2, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ejercicio 12\n",
        "from functools import reduce\n",
        "\n",
        "def media_geometrica(valores):\n",
        "    producto = reduce(lambda x, y: x * y, valores)\n",
        "    media = producto**(1/len(valores))\n",
        "    return media\n",
        "\n",
        "# Ejemplo de uso\n",
        "numeros = [2, 4, 8, 16]\n",
        "media = media_geometrica(numeros)\n",
        "print(f\"La media geométrica de los valores es {media}.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JvuDz54rMRkA",
        "outputId": "d9d27b50-7686-4d18-dbe3-db636cf84f42"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La media geométrica de los valores es 5.656854249492381.\n"
          ]
        }
      ]
    }
  ]
}